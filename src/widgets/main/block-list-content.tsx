import { useBlocksStore } from '@entities/main/store/block.store';
import BlockItem from '@feature/block-item';
import { useEffect, useRef, useCallback } from 'react';

export default function BlocksList() {
  const { editing, focused, focusNext, focusPrev, toggleSelected, setFocus } = useBlocksStore();
  const containerRef = useRef<HTMLDivElement>(null);

  // –û—Ç–¥–∞—ë–º —Ñ–æ–∫—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∏ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–æ–∫—É—Å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
  useEffect(() => {
    if (!focused) setFocus('A'); // –∏–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª—é—á –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
    containerRef.current?.focus();
  }, [focused, setFocus]);

  const onKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLDivElement>) => {
      if (editing) return;

      // —Å—Ç—Ä–µ–ª–∫–∏
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        focusNext();
        return;
      }
      if (e.key === 'ArrowUp') {
        e.preventDefault();
        focusPrev();
        return;
      }

      // Space (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã)
      if (e.code === 'Space' || e.key === ' ') {
        if (focused) {
          e.preventDefault();
          toggleSelected(focused);
        }
        return;
      }
    },
    [editing, focused, focusNext, focusPrev, toggleSelected],
  );

  return (
    <div
      ref={containerRef}
      tabIndex={0} // üîë –¥–µ–ª–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º
      className='flex flex-col items-start gap-4 outline-none'
      onKeyDown={onKeyDown} // üîë —Å–ª—É—à–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å, –∞ –Ω–µ –Ω–∞ window
    >
      <BlockItem slice='A' />
      <BlockItem slice='B' />
      <BlockItem slice='C' />
      <BlockItem slice='D' />
      <BlockItem slice='E' />
    </div>
  );
}
